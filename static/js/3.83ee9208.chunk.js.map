{"version":3,"sources":["Components/common/Button/Button.tsx","Components/common/Button/Button.module.scss","assents/image/user.png","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Components/Profile/MyPost/MyPost.module.scss","Components/Profile/ProfileInfo/ProfileInfo.module.scss","Components/Profile/MyPost/Post/Post.module.scss","Components/Profile/Profile.module.scss","Components/Profile/ProfileInfo/ProfileData/ProfileData.module.scss","Components/Profile/ProfileInfo/ProfileData/ProfileDataForm.module.scss","Components/Profile/MyPost/MyPostTextareaForm.tsx","Components/Profile/MyPost/Post/Post.tsx","Components/Profile/MyPost/MyPost.tsx","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","Components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["Button","title","onClick","props","finalClassName","s","button","className","disabled","module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","maxLength30","maxLengthCreator","TextareaReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","Post","post","src","profile","photos","large","userPhoto","massage","like","MyPost","React","memo","postElements","map","p","message","numberLike","id","mypost","mypostContainer","ava","newPost","addPost","myPosts","ProfileStatusWithHooks","useState","status","setStatus","editMode","setEditMode","useEffect","profileStatus","statusInput","autoFocus","onChange","e","currentTarget","onBlur","updateStatus","statusText","onDoubleClick","Contact","contactTitle","contactValue","contact","ProfileData","isOwner","goToEditMode","profileData","left","fullName","right","dataValue","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","keys","key","ProfileDataReduxForm","profileDataForm","error","style","formSummaryError","createField","Input","input","textarea","buttonBlock","ProfileInfo","savePhoto","saveProfile","Preloader","PrfileInfo","PrfileInfoImg","inputFileBlock","newPhotoButton","document","getElementById","click","inputFile","type","target","files","discriptionInfo","formData","then","initialValues","Profile","profileContainer","newPostChange","ProfileContainer","userID","this","match","params","String","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","withAuthRedirect","connect","state","postPage","postData","auth","setUsersProfile","withRouter"],"mappings":"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","file":"static/js/3.83ee9208.chunk.js","sourcesContent":["import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\nimport s from './Button.module.scss'\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\n\ntype ButtonPropsType = DefaultButtonPropsType & {\n    title?: string\n    onClick?: () => void\n    disabled?: boolean\n\n}\n\nconst Button = ({ title, onClick, ...props }: ButtonPropsType) => {\n    const finalClassName = `${s.button} ${props.className}`\n    return <button onClick={onClick} className={finalClassName} disabled={props.disabled}>{title}</button>\n}\n\nexport default Button","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2czcP\"};","export default __webpack_public_path__ + \"static/media/user.17df8b8c.png\";","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mypost\":\"MyPost_mypost__3sDTz\",\"mypostContainer\":\"MyPost_mypostContainer__2-bdk\",\"ava\":\"MyPost_ava__3OT6u\",\"form\":\"MyPost_form__26x3X\",\"myPosts\":\"MyPost_myPosts__2lsYr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PrfileInfo\":\"ProfileInfo_PrfileInfo__3tEmj\",\"PrfileInfoImg\":\"ProfileInfo_PrfileInfoImg__10neJ\",\"ava\":\"ProfileInfo_ava__arQX6\",\"inputFileBlock\":\"ProfileInfo_inputFileBlock__3Q-WZ\",\"newPhotoButton\":\"ProfileInfo_newPhotoButton__2ZH4d\",\"inputFile\":\"ProfileInfo_inputFile__2g-pv\",\"discriptionInfo\":\"ProfileInfo_discriptionInfo__ZtD8k\",\"profileStatus\":\"ProfileInfo_profileStatus__2A15U\",\"statusText\":\"ProfileInfo_statusText__1GbtM\",\"statusInput\":\"ProfileInfo_statusInput__2bsQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3xkcK\",\"massage\":\"Post_massage__3-F9C\",\"like\":\"Post_like__zUo2a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__Raocc\",\"profileContainer\":\"Profile_profileContainer__3htoh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__1w1Zb\",\"left\":\"ProfileData_left__3pbX5\",\"fullName\":\"ProfileData_fullName__12O-a\",\"right\":\"ProfileData_right___X0OE\",\"dataValue\":\"ProfileData_dataValue__2E3HL\",\"contacts\":\"ProfileData_contacts__1KW0b\",\"contact\":\"ProfileData_contact__33m_b\",\"button\":\"ProfileData_button__3Vsaf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileDataForm\":\"ProfileDataForm_profileDataForm__uKpuE\",\"profileData\":\"ProfileDataForm_profileData__16pC4\",\"textarea\":\"ProfileDataForm_textarea__qvDXo\",\"input\":\"ProfileDataForm_input__3NKMV\",\"buttonBlock\":\"ProfileDataForm_buttonBlock__1-53G\",\"button\":\"ProfileDataForm_button__d1Rox\"};","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport s from './MyPost.module.scss';\nimport Button from \"../../common/Button/Button\";\n\nexport type TextareaPropsType = {\n    newPost: string\n}\n\nconst maxLength30 = maxLengthCreator(30)\n\nconst MyPostTextareaForm: React.FC<InjectedFormProps<TextareaPropsType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={s.form}>\n            <div>\n                <Field placeholder={'Add new post'} name={'newPost'} component={Textarea}\n                       validate={[required, maxLength30]}/>\n            </div>\n            <div>\n                <Button title={'Send'} className={s.button}/>\n            </div>\n        </form>\n    )\n}\n\nexport const TextareaReduxForm = reduxForm<TextareaPropsType>({form: 'profileNewPostForm'})(MyPostTextareaForm)\n  ","import React from 'react';\nimport s from './Post.module.scss';\nimport userPhoto from \"../../../../assents/image/user.png\";\nimport {ProfileType} from \"../../Profile\";\n\ntype Likes = {\n    profile: ProfileType\n    like: number\n    massage: string\n}\n\nconst Post = (props: Likes) => {\n    return (\n        <div className={s.post}>\n            <div>\n                <img src={props?.profile?.photos?.large || userPhoto}/>\n            </div>\n            <div className={s.massage}>\n                {props.massage}\n                <div className={s.like}>\n                    <span>♥</span>{props.like}\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Post;","import React from 'react';\nimport {postType} from '../../../types/types';\nimport s from './MyPost.module.scss';\nimport {TextareaPropsType, TextareaReduxForm} from './MyPostTextareaForm';\nimport Post from './Post/Post';\nimport userPhoto from \"../../../assents/image/user.png\";\nimport {ProfileType} from \"../Profile\";\n\ntype MyPostType = {\n    profile: ProfileType\n    post: Array<postType>\n    newPostChange: (text: string) => void\n    addPost: (text: string) => void\n}\n\nconst MyPost = React.memo((props: MyPostType) => {\n    const postElements = props.post.map(p => <Post profile={props.profile} key={p.id} massage={p.message}\n                                                   like={p.numberLike}/>)\n    const onAddPost = ({newPost}: TextareaPropsType) => {\n        props.addPost(newPost)\n    }\n    return (\n        <div className={s.mypost}>\n            <div className={s.mypostContainer}>\n                <div>\n                    <img className={s.ava}\n                         src={props?.profile?.photos?.large || userPhoto}/>\n                </div>\n                <TextareaReduxForm onSubmit={onAddPost}/>\n            </div>\n            <div className={s.myPosts}>\n                <h3>My post</h3>\n                {postElements}\n            </div>\n        </div>\n\n    )\n})\n\nexport default MyPost;\n\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport s from './ProfileInfo.module.scss';\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\ntype localStateType = {\n    editMode: boolean\n    status: string\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\n\n    const [status, setStatus] = useState<string>(props.status)\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.value) {\n            setStatus(e.currentTarget.value)\n        }\n    }\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n\n    return (\n        <div className={s.profileStatus}>\n            Status:{!editMode\n                ?\n                <div className={s.statusText}>\n                    <span onDoubleClick={activateEditMode}>{props.status || '__________'}</span>\n                </div>\n                :\n                <div className={s.statusInput}>\n                    <input autoFocus onChange={onStatusChange} onBlur={deactivateEditMode} value={status}/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks","import {ProfileType} from \"../../Profile\";\nimport Button from \"../../../common/Button/Button\";\nimport React, {ChangeEvent} from \"react\";\nimport s from './ProfileData.module.scss'\nimport ProfileStatusWithHooks from \"../ProfileStatusWithHooks\";\n\n\ntype ProfileDataType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileData = ({updateStatus, status, profile, isOwner, goToEditMode}: ProfileDataType) => {\n    return (\n        <div className={s.profileData}>\n\n            <section className={s.left}>\n                <section className={s.fullName}>\n                    <b>Name:</b>{profile.fullName}\n                </section>\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </section>\n            <section className={s.right}>\n                <section className={s.dataValue}>\n                    <b>looking for a job:</b>{profile.lookingForAJob ? \"Yes\" : 'No'}\n                </section>\n                {profile.lookingForAJob && <section className={s.dataValue}>\n                    <b>My professional skills:</b>{profile.lookingForAJobDescription ? \"Yes\" : 'No'}\n                </section>\n                }\n                <section className={s.dataValue}>\n                    <b>About me:</b>{profile.aboutMe}\n                </section>\n                <section className={s.contacts}>\n                    <b>Contacts</b>:{Object.keys(profile.contacts).map(key => {\n                    //@ts-ignore\n                    if (profile.contacts[key] !== null) {\n                        //@ts-ignore\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n                    }\n                })}\n\n                </section>\n                {isOwner && <Button title={\"Edit\"} onClick={goToEditMode} className={s.button}></Button>}\n            </section>\n        </div>\n    )\n}\n\ntype ContactType = {\n    contactValue: string | null\n    contactTitle: string\n}\n\nconst Contact = ({contactTitle, contactValue}: ContactType) => {\n    return (\n        <div className={s.contact}>\n            <b>{contactTitle}</b>:{contactValue}\n        </div>\n    )\n}\n\nexport default ProfileData","import React from \"react\";\nimport {createField, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {ProfileType} from \"../../Profile\";\nimport style from \"../../../common/FormsControls/FormsControls.module.scss\";\nimport Button from \"../../../common/Button/Button\";\nimport s from './ProfileDataForm.module.scss'\n\n\ninterface ProfileDataFormType {\n    profile: ProfileType\n}\n\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormType> & ProfileDataFormType> = (props) => {\n    const {profile} = props;\n    return (\n        <form onSubmit={props.handleSubmit} className={s.profileDataForm}>\n            <div className={s.profileData}>\n                {props.error && <div className={style.formSummaryError}>\n                    {props.error}\n                </div>}\n                <div>\n                    <section>\n                        <b>Full name:</b>{createField(\"Full name\", 'fullName', Input, [], s.input, 'text')}\n                    </section>\n                    <section>\n                        <b>looking for a job:</b>{createField(\"\", 'lookingForAJob', Input, [], s.input, 'checkbox')}\n                    </section>\n                    <section>\n                        <b>My professional\n                            skills:</b>{createField(\"My professional skills\", 'lookingForAJobDescription', Textarea, [], s.textarea, 'text')}\n                    </section>\n\n                    <section>\n                        <b>About me:</b>{createField(\"About me\", 'aboutMe', Textarea, [], s.textarea, 'text')}\n                    </section>\n\n                </div>\n\n                <section>\n                    <b>Contacts</b>:{Object.keys(profile.contacts).map(key => {\n                    return <div key={key}>\n                        <b>{key}:{createField(key, \"contacts.\" + key, Input, [], s.input, 'text')}</b>\n                    </div>\n\n                })}\n                </section>\n\n            </div>\n            <div className={s.buttonBlock}>\n                <Button title={'Save'} className={s.button}/>\n            </div>\n        </form>\n    )\n}\n\nconst ProfileDataReduxForm = reduxForm<ProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\nexport default ProfileDataReduxForm","import React, {ChangeEvent, useState} from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.scss';\nimport userPhoto from './../../../assents/image/user.png'\nimport {ProfileType} from \"../Profile\";\nimport ProfileData from \"./ProfileData/ProfileData\";\nimport ProfileDataReduxForm from \"./ProfileData/ProfileDataForm\";\nimport Button from \"../../common/Button/Button\";\n\ntype ProfileInfoType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: any) => void\n    saveProfile: (formData: ProfileType) => void\n}\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const goToEditMode = () => {\n        setEditMode(true)\n    }\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length > 0) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        //@ts-ignore\n        saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    const onClickNewPhoto = () => {\n        // @ts-ignore\n        document.getElementById('input-file').click()\n    }\n    return (\n        <div className={s.PrfileInfo}>\n            <div className={s.PrfileInfoImg}>\n                <img className={s.ava} src={profile.photos.large || userPhoto}/>\n                {!!isOwner &&\n                    <div className={s.inputFileBlock}>\n                        <Button title={'New photo'} className={s.newPhotoButton} onClick={onClickNewPhoto}/>\n                        <input id={'input-file'} className={s.inputFile} type={'file'} onChange={onMainPhotoSelected}/>\n                    </div>\n                }\n            </div>\n\n            <div className={s.discriptionInfo}>\n\n                {editMode\n                    ? <ProfileDataReduxForm profile={profile} onSubmit={onSubmit} initialValues={profile}/>\n                    : <ProfileData status={status} updateStatus={updateStatus}\n                                   profile={profile} isOwner={isOwner}\n                                   goToEditMode={goToEditMode}/>}\n\n            </div>\n        </div>\n    )\n}\n\n\nexport default ProfileInfo;","import React from 'react';\nimport {postType} from '../../types/types';\nimport MyPost from './MyPost/MyPost';\nimport s from './Profile.module.scss';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\nexport type ProfileType = {\n    aboutMe: string\n    contacts: { facebook: string, website: string, vk: string, twitter: string, instagram: string }\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    photos: { small: any, large: any }\n    userId: number\n}\n\ntype PostType = {\n    profile: ProfileType\n    isOwner:boolean\n    post: Array<postType>\n    status: string\n    newPostChange: (text: string) => void\n    addPost: (text: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photo: any) => void\n    saveProfile:(formData:ProfileType)=>void\n}\n\nconst Profile = (props: PostType) => {\n    return (\n        <div className={s.profile}>\n            <div className={s.profileContainer}>\n                <ProfileInfo saveProfile={props.saveProfile} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto}/>\n                <MyPost\n                    profile={props.profile}\n                    post={props.post}\n                    newPostChange={props.newPostChange}\n                    addPost={props.addPost}\n                />\n            </div>\n        </div>\n    )\n}\nexport default Profile;","import {connect} from 'react-redux';\nimport React from \"react\"\nimport {AppStoreType} from '../../redux/redux-store';\nimport Profile, {ProfileType} from './Profile';\nimport {\n    addPost,\n    setUsersProfile,\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto, saveProfile\n} from '../../redux/profile-reducer';\nimport {postType} from \"../../types/types\";\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype PathParamsType = {\n    userID: string\n}\n\ntype MapStateToPropsType = {\n    profile: any\n    post: postType[]\n    status: string\n    userID: number | null\n}\n\ntype MapDispachToPropsType = {\n    addPost: (text: string) => void\n    newPostChange: (text: string) => void\n    setUsersProfile: (profile: ProfileType) => void\n    getUserProfile: (userId: string) => void\n    getStatus: (status: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photo: any) => void\n    saveProfile:(formData:ProfileType)=>void\n}\n\ntype ProfileContainerType = MapStateToPropsType & MapDispachToPropsType\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userID = this.props.match.params.userID\n        if (!userID) {\n            userID = String(this.props.userID)\n        }\n        this.props.getUserProfile(userID)\n        this.props.getStatus(userID)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userID !== this.props.match.params.userID) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userID}\n                     profile={this.props.profile} status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStoreType): MapStateToPropsType => {\n    return {\n        profile: state.postPage.profile,\n        status: state.postPage.status,\n        post: state.postPage.postData,\n        userID: state.auth.id,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, {addPost, setUsersProfile, getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n)\n(ProfileContainer)"],"sourceRoot":""}