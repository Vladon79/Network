{"version":3,"sources":["assents/image/user.png","Components/common/Button/Button.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Components/common/Button/Button.module.scss","Components/Profile/MyPost/MyPost.module.scss","Components/Profile/ProfileInfo/ProfileInfo.module.scss","Components/Profile/MyPost/Post/Post.module.scss","Components/Profile/Profile.module.scss","Components/Profile/ProfileInfo/ProfileData/ProfileData.module.scss","Components/Profile/MyPost/MyPostTextareaForm.tsx","Components/Profile/MyPost/Post/Post.tsx","Components/Profile/MyPost/MyPost.tsx","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","Components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["Button","title","onClick","props","finalClassName","s","button","className","disabled","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","maxLength30","maxLengthCreator","TextareaReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","Post","post","src","userPhoto","massage","like","MyPost","React","memo","postElements","map","p","message","numberLike","id","mypost","mypostContainer","ava","newPost","addPost","myPosts","ProfileStatusWithHooks","useState","status","setStatus","editMode","setEditMode","useEffect","profileStatus","statusInput","autoFocus","onChange","e","currentTarget","onBlur","updateStatus","statusText","onDoubleClick","Contact","contactTitle","contactValue","contact","ProfileData","profile","isOwner","goToEditMode","profileData","left","fullName","right","lookingForAJob","lookingForAJobDescription","aboutMe","keys","contacts","key","ProfileDataReduxForm","error","style","formSummaryError","createField","Input","ProfileInfo","savePhoto","saveProfile","Preloader","PrfileInfo","PrfileInfoImg","photos","large","inputFile","type","target","files","discriptionInfo","formData","then","initialValues","Profile","profileContainer","newPostChange","ProfileContainer","userID","this","match","params","String","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","withAuthRedirect","connect","state","postPage","postData","auth","setUsersProfile","withRouter"],"mappings":"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","file":"static/js/3.34c42441.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.17df8b8c.png\";","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\nimport s from './Button.module.scss'\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\n\ntype ButtonPropsType = DefaultButtonPropsType & {\n    title?: string\n    onClick?: () => void\n    disabled?: boolean\n\n}\n\nconst Button = ({ title, onClick, ...props }: ButtonPropsType) => {\n    const finalClassName = `${s.button} ${props.className}`\n    return <button onClick={onClick} className={finalClassName} disabled={props.disabled}>{title}</button>\n}\n\nexport default Button","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2czcP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mypost\":\"MyPost_mypost__3sDTz\",\"mypostContainer\":\"MyPost_mypostContainer__2-bdk\",\"ava\":\"MyPost_ava__3OT6u\",\"form\":\"MyPost_form__26x3X\",\"myPosts\":\"MyPost_myPosts__2lsYr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PrfileInfo\":\"ProfileInfo_PrfileInfo__3tEmj\",\"PrfileInfoImg\":\"ProfileInfo_PrfileInfoImg__10neJ\",\"ava\":\"ProfileInfo_ava__arQX6\",\"discriptionInfo\":\"ProfileInfo_discriptionInfo__ZtD8k\",\"profileStatus\":\"ProfileInfo_profileStatus__2A15U\",\"statusText\":\"ProfileInfo_statusText__1GbtM\",\"statusInput\":\"ProfileInfo_statusInput__2bsQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3xkcK\",\"massage\":\"Post_massage__3-F9C\",\"like\":\"Post_like__zUo2a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__Raocc\",\"profileContainer\":\"Profile_profileContainer__3htoh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileData\":\"ProfileData_profileData__1w1Zb\",\"left\":\"ProfileData_left__3pbX5\",\"fullName\":\"ProfileData_fullName__12O-a\",\"right\":\"ProfileData_right___X0OE\",\"contact\":\"ProfileData_contact__33m_b\"};","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport s from './MyPost.module.scss';\n\nexport type TextareaPropsType = {\n    newPost: string\n}\n\nconst maxLength30 = maxLengthCreator(30)\n\nconst MyPostTextareaForm: React.FC<InjectedFormProps<TextareaPropsType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={s.form}>\n            <div>\n                <Field placeholder={'Add new post'} name={'newPost'} component={Textarea}\n                       validate={[required, maxLength30]}/>\n            </div>\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nexport const TextareaReduxForm = reduxForm<TextareaPropsType>({form: 'profileNewPostForm'})(MyPostTextareaForm)\n  ","import React from 'react';\nimport s from './Post.module.scss';\nimport userPhoto from \"../../../../assents/image/user.png\";\n\ntype Likes = {\n    like: number\n    massage: string\n}\n\nconst Post = (props: Likes) => {\n    return (\n        <div className={s.post}>\n            <div>\n                <img src={userPhoto}/>\n            </div>\n            <div className={s.massage}>\n                {props.massage}\n                <div className={s.like}>\n                    <span>♥</span>{props.like}\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Post;","import React from 'react';\nimport {postType} from '../../../types/types';\nimport s from './MyPost.module.scss';\nimport {TextareaPropsType, TextareaReduxForm} from './MyPostTextareaForm';\nimport Post from './Post/Post';\nimport userPhoto from \"../../../assents/image/user.png\";\n\ntype MyPostType = {\n    post: Array<postType>\n    newPostChange: (text: string) => void\n    addPost: (text: string) => void\n}\n\nconst MyPost = React.memo((props: MyPostType) => {\n    const postElements = props.post.map(p => <Post key={p.id} massage={p.message} like={p.numberLike}/>)\n    const onAddPost = ({newPost}: TextareaPropsType) => {\n        props.addPost(newPost)\n    }\n    return (\n        <div className={s.mypost}>\n            <div className={s.mypostContainer}>\n                <div>\n                    <img className={s.ava} src={userPhoto} />\n                </div>\n                <TextareaReduxForm onSubmit={onAddPost}/>\n            </div>\n            <div className={s.myPosts}>\n                <h3>My post</h3>\n                {postElements}\n            </div>\n        </div>\n\n    )\n})\n\nexport default MyPost;\n\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport s from './ProfileInfo.module.scss';\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\ntype localStateType = {\n    editMode: boolean\n    status: string\n}\n\nconst ProfileStatusWithHooks = (props: ProfileStatusType) => {\n\n    const [status, setStatus] = useState<string>(props.status)\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.value) {\n            setStatus(e.currentTarget.value)\n        }\n    }\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n\n    return (\n        <div className={s.profileStatus}>\n            Status:{!editMode\n                ?\n                <div className={s.statusText}>\n                    <span onDoubleClick={activateEditMode}>{props.status || '__________'}</span>\n                </div>\n                :\n                <div className={s.statusInput}>\n                    <input autoFocus onChange={onStatusChange} onBlur={deactivateEditMode} value={status}/>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks","import {ProfileType} from \"../../Profile\";\nimport Button from \"../../../common/Button/Button\";\nimport React, {ChangeEvent} from \"react\";\nimport s from './ProfileData.module.scss'\nimport ProfileStatusWithHooks from \"../ProfileStatusWithHooks\";\n\n\ntype ProfileDataType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileData = ({updateStatus, status, profile, isOwner, goToEditMode}: ProfileDataType) => {\n    return (\n        <div className={s.profileData}>\n\n            <section className={s.left}>\n                <section className={s.fullName}>\n                    <b>Name:</b>{profile.fullName}\n                </section>\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </section>\n            <section className={s.right}>\n                <section>\n                    <b>looking for a job:</b>{profile.lookingForAJob ? \"Yes\" : 'No'}\n                </section>\n                {profile.lookingForAJob && <section>\n                    <b>My professional skills:</b>{profile.lookingForAJobDescription ? \"Yes\" : 'No'}\n                </section>\n                }\n                <section>\n                    <b>About me:</b>{profile.aboutMe}\n                </section>\n                <section>\n                    <b>Contacts</b>:{Object.keys(profile.contacts).map(key => {\n                    //@ts-ignore\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n                })}\n                    {isOwner && <Button title={\"Edit\"} onClick={goToEditMode}></Button>}\n                </section>\n            </section>\n        </div>\n    )\n}\n\ntype ContactType = {\n    contactValue: string | null\n    contactTitle: string\n}\n\nconst Contact = ({contactTitle, contactValue}: ContactType) => {\n    return (\n        <div className={s.contact}>\n            <b>{contactTitle}</b>:{contactValue}\n        </div>\n    )\n}\n\nexport default ProfileData","import React from \"react\";\nimport {createField, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {ProfileType} from \"../../Profile\";\nimport style from \"../../../common/FormsControls/FormsControls.module.scss\";\n\n\ninterface ProfileDataFormType {\n    profile: ProfileType\n}\n\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormType> & ProfileDataFormType> = (props) => {\n    const {profile} = props;\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <button>Save</button>\n            {props.error && <div className={style.formSummaryError}>\n                {props.error}\n            </div>}\n            <section>\n                <b>Full name:</b>{createField(\"Full name\", 'fullName', Input, [], {}, 'text')}\n            </section>\n            <section>\n                <b>looking for a job:</b>{createField(\"\", 'lookingForAJob', Input, [], {}, 'checkbox')}\n            </section>\n            <section>\n                <b>My professional\n                    skills:</b>{createField(\"My professional skills\", 'lookingForAJobDescription', Textarea, [], {}, 'text')}\n            </section>\n\n            <section>\n                <b>About me:</b>{createField(\"About me\", 'aboutMe', Textarea, [], {}, 'text')}\n            </section>\n            <section>\n                <b>Contacts</b>:{Object.keys(profile.contacts).map(key => {\n                return <div key={key}>\n                    <b>{key}:{createField(\"Full name\", \"contacts.\" + key, Input, [], {}, 'text')}</b>\n                </div>\n\n            })}\n            </section>\n        </form>\n    )\n}\n\nconst ProfileDataReduxForm = reduxForm<ProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\nexport default ProfileDataReduxForm","import React, {ChangeEvent, useState} from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport s from './ProfileInfo.module.scss';\nimport userPhoto from './../../../assents/image/user.png'\nimport {ProfileType} from \"../Profile\";\nimport ProfileData from \"./ProfileData/ProfileData\";\nimport ProfileDataReduxForm from \"./ProfileData/ProfileDataForm\";\n\ntype ProfileInfoType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photo: any) => void\n    saveProfile: (formData: ProfileType) => void\n}\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const goToEditMode = () => {\n        setEditMode(true)\n    }\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length > 0) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        //@ts-ignore\n        saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n    return (\n        <div className={s.PrfileInfo}>\n            <div className={s.PrfileInfoImg}>\n                <img className={s.ava} src={profile.photos.large || userPhoto}/>\n                {!!isOwner && <input className={s.inputFile} type={'file'} onChange={onMainPhotoSelected}/>}\n            </div>\n\n            <div className={s.discriptionInfo}>\n\n                {editMode\n                    ? <ProfileDataReduxForm profile={profile} onSubmit={onSubmit} initialValues={profile}/>\n                    : <div>\n                        <ProfileData status={status} updateStatus={updateStatus}\n                                     profile={profile} isOwner={isOwner}\n                                     goToEditMode={goToEditMode}/>\n\n                    </div>}\n\n            </div>\n        </div>\n    )\n}\n\n\nexport default ProfileInfo;","import React from 'react';\nimport {postType} from '../../types/types';\nimport MyPost from './MyPost/MyPost';\nimport s from './Profile.module.scss';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\nexport type ProfileType = {\n    aboutMe: string\n    contacts: { facebook: string, website: string, vk: string, twitter: string, instagram: string }\n    fullName: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    photos: { small: string, large: string }\n    userId: number\n}\n\ntype PostType = {\n    profile: ProfileType\n    isOwner:boolean\n    post: Array<postType>\n    status: string\n    newPostChange: (text: string) => void\n    addPost: (text: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photo: any) => void\n    saveProfile:(formData:ProfileType)=>void\n}\n\nconst Profile = (props: PostType) => {\n\n    return (\n        <div className={s.profile}>\n            <div className={s.profileContainer}>\n                <ProfileInfo saveProfile={props.saveProfile} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} savePhoto={props.savePhoto}/>\n                <MyPost\n                    post={props.post}\n                    newPostChange={props.newPostChange}\n                    addPost={props.addPost}\n                />\n            </div>\n        </div>\n    )\n}\nexport default Profile;","import {connect} from 'react-redux';\nimport React from \"react\"\nimport {AppStoreType} from '../../redux/redux-store';\nimport Profile, {ProfileType} from './Profile';\nimport {\n    addPost,\n    setUsersProfile,\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto, saveProfile\n} from '../../redux/profile-reducer';\nimport {postType} from \"../../types/types\";\nimport {RouteComponentProps, withRouter} from \"react-router\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\ntype PathParamsType = {\n    userID: string\n}\n\ntype MapStateToPropsType = {\n    profile: any\n    post: postType[]\n    status: string\n    userID: number | null\n}\n\ntype MapDispachToPropsType = {\n    addPost: (text: string) => void\n    newPostChange: (text: string) => void\n    setUsersProfile: (profile: ProfileType) => void\n    getUserProfile: (userId: string) => void\n    getStatus: (status: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photo: any) => void\n    saveProfile:(formData:ProfileType)=>void\n}\n\ntype ProfileContainerType = MapStateToPropsType & MapDispachToPropsType\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerType\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userID = this.props.match.params.userID\n        if (!userID) {\n            userID = String(this.props.userID)\n        }\n        this.props.getUserProfile(userID)\n        this.props.getStatus(userID)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userID !== this.props.match.params.userID) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userID}\n                     profile={this.props.profile} status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStoreType): MapStateToPropsType => {\n    return {\n        profile: state.postPage.profile,\n        status: state.postPage.status,\n        post: state.postPage.postData,\n        userID: state.auth.id,\n    }\n}\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect(mapStateToProps, {addPost, setUsersProfile, getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n)\n(ProfileContainer)"],"sourceRoot":""}