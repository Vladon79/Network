{"version":3,"sources":["Components/Dialogs/Dialogs.module.scss","Components/Dialogs/Message/Message.module.scss","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","src","ava","to","activeClassName","active","name","Messages","textMesage","myMassege","YoutextMesage","MytextMesage","Dialogs","messagesElement","messages","map","m","Message","message","myMessage","dialogsElement","dialogs","d","dialogsItem","addMessage","DialogReduxForm","onSubmit","newMessage","console","log","SendMessage","maxLength200","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","component","Textarea","validate","required","input","compose","withAuthRedirect","connect","state","messagePage","masseges","isAuth","auth","dispatch","text","SendMessageAC"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,WAAa,8B,oBCApND,EAAOC,QAAU,CAAC,aAAe,8BAA8B,cAAgB,iC,qGCiBhEC,EAXI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,sBAAKC,UAAWC,IAAEC,OAAlB,UACE,qBAAKC,IAAKN,EAAMO,MAChB,cAAC,IAAD,CAASC,GAAIP,EAAMQ,gBAAiBL,IAAEM,OAAtC,SAA+CV,EAAMW,W,0BCS5CC,EAZE,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,WAAYC,EAAwC,EAAxCA,UAAwC,0CAEtE,OAEI,qBAAKX,UAAWW,EAAYV,IAAEW,cAAiBX,IAAEY,aAAjD,SACGH,K,iCCiCMI,EA3BC,SAACjB,GAEb,IAAMkB,EAAkBlB,EAAMmB,SAASC,KAAI,SAAAC,GAAC,OAAI,cAACC,EAAD,CAAqBT,WAAYQ,EAAEE,QACzBT,UAAWO,EAAEG,WADRH,EAAEnB,OAE3DuB,EAAiBzB,EAAM0B,QAAQN,KAAI,SAAAO,GAAC,OAAI,cAAC,EAAD,CAAuBhB,KAAMgB,EAAEhB,KAAMT,GAAIyB,EAAEzB,GAAIK,IAAKoB,EAAEpB,KAArCoB,EAAEzB,OAOjE,OACI,sBAAKC,UAAWC,IAAEsB,QAAlB,UACI,qBAAKvB,UAAWC,IAAEwB,YAAlB,SACKH,IAGL,sBAAKtB,UAAWC,IAAEe,SAAlB,UACI,8BAAMD,IAEN,qBAAKf,UAAWC,IAAEyB,WAAlB,SACI,cAACC,EAAD,CAAiBC,SAfhB,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,WACfC,QAAQC,IAAIF,GACZhC,EAAMmC,YAAYH,eAyBpBI,EAAeC,YAAiB,KAmBhCP,EAAkBQ,YAAgC,CAACC,KAAM,cAAvCD,EAjB+C,SAACtC,GACpE,OACI,uBAAM+B,SAAU/B,EAAMwC,aAAcrC,UAAWC,IAAEmC,KAAjD,UAEI,8BACI,cAACE,EAAA,EAAD,CAAOC,YAAa,cAAe/B,KAAM,aAAcgC,UAAWC,IAC3DC,SAAU,CAACC,IAAUV,GAAejC,UAAWC,IAAE2C,UAE5D,8BACI,kD,gBCvCDC,sBACXC,IACFC,aAlBsB,SAACC,GACvB,MAAO,CACLhC,SAAUgC,EAAMC,YAAYC,SAC5B3B,QAASyB,EAAMC,YAAY1B,QAC3B4B,OAAQH,EAAMI,KAAKD,WAII,SAACE,GAC1B,MAAO,CACLrB,YAAa,SAACsB,GACZD,EAASE,YAAcD,SAKdT,CAGb/B","file":"static/js/5.5c651a6e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1nBy9\",\"dialogsItem\":\"Dialogs_dialogsItem__2c3zI\",\"dialog\":\"Dialogs_dialog__2pIox\",\"active\":\"Dialogs_active__3OOF6\",\"messages\":\"Dialogs_messages__164NY\",\"addMessage\":\"Dialogs_addMessage__1sej9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MytextMesage\":\"Message_MytextMesage__25ENL\",\"YoutextMesage\":\"Message_YoutextMesage__2wXAD\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { dialogsType } from '../../../types/types';\nimport s from './../Dialogs.module.scss';\n\n\n\nconst DialogItem = (props: dialogsType) => {\n  let path = '/dialogs/' + props.id;\n  return (\n    <div className={s.dialog}>\n      <img src={props.ava}/>\n      <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n    </div>\n  )\n}\n\n\nexport default DialogItem;","import React from 'react';\nimport s from './Message.module.scss'\n\n\ntype PropsMessege = {\n  textMesage: string\n  myMassege: boolean\n}\n\nconst Messages = ({ textMesage, myMassege, ...props }: PropsMessege) => {\n\n  return (\n    \n      <div className={myMassege ? s.YoutextMesage :  s.MytextMesage}>\n        {textMesage}\n      </div>\n      \n  )\n}\n\n\nexport default Messages;","import React, {ChangeEvent} from 'react';\nimport DialogItem from './DialogItem/DialogItem';\nimport s from './Dialogs.module.scss';\nimport Messages from './Message/Message';\nimport {dialogsType, messagesType} from '../../types/types';\nimport {Redirect} from 'react-router-dom';\nimport Button from '../common/Button/Button';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {Textarea} from '../common/FormsControls/FormsControls';\nimport {maxLengthCreator, required} from '../../utils/validators/validator';\n\ntype DialogsType = {\n    newMessage: string\n    messages: Array<messagesType>\n    dialogs: Array<dialogsType>\n    NewMessageChange: (text: string) => void\n    SendMessage: (text: string) => void\n    isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsType) => {\n\n    const messagesElement = props.messages.map(m => <Messages key={m.id} textMesage={m.message}\n                                                              myMassege={m.myMessage}/>)\n    const dialogsElement = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id} ava={d.ava}/>)\n\n    const onSubmit = ({newMessage}: DialogsFormPropsType) => {\n        console.log(newMessage)\n        props.SendMessage(newMessage)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItem}>\n                {dialogsElement}\n            </div>\n\n            <div className={s.messages}>\n                <div>{messagesElement}</div>\n\n                <div className={s.addMessage}>\n                    <DialogReduxForm onSubmit={onSubmit}/>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Dialogs;\n\nexport type DialogsFormPropsType = {\n    newMessage: string\n}\n\nconst maxLength200 = maxLengthCreator(200)\n\nconst DialogsForm: React.FC<InjectedFormProps<DialogsFormPropsType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={s.form}>\n            {/* e.prevendDefault:сбор всех данных,упаковываются в обьект: контейнерная компонента вызывает onSubmit(formData) */}\n            <div>\n                <Field placeholder={'New message'} name={'newMessage'} component={Textarea}\n                       validate={[required, maxLength200]} className={s.input}/>\n            </div>\n            <div>\n                <button>Send</button>\n                {/* <Button title={'Login'} onClick={}/> */}\n            </div>\n        </form>\n    )\n}\n\n\nconst DialogReduxForm = reduxForm<DialogsFormPropsType>({form: 'newMessage'})(DialogsForm)","import {  SendMessageAC } from '../../redux/dialogs-reduser';\nimport { connect } from 'react-redux';\nimport { AppStoreType } from '../../redux/redux-store';\nimport Dialogs from './Dialogs';\nimport { compose, Dispatch } from 'redux';\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\nimport React from 'react';\n\n\nconst mapStateToProps = (state: AppStoreType) => {\n  return {\n    messages: state.messagePage.masseges,\n    dialogs: state.messagePage.dialogs,\n    isAuth: state.auth.isAuth\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    SendMessage: (text: string) => {\n      dispatch(SendMessageAC(text))\n    },\n  }\n}\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n  connect(mapStateToProps, mapDispatchToProps)\n)(Dialogs)"],"sourceRoot":""}